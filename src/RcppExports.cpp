// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// addScansCPP
Rcpp::NumericMatrix addScansCPP(Rcpp::NumericMatrix iontable, Rcpp::NumericMatrix scans);
RcppExport SEXP _clams_addScansCPP(SEXP iontableSEXP, SEXP scansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type iontable(iontableSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type scans(scansSEXP);
    rcpp_result_gen = Rcpp::wrap(addScansCPP(iontable, scans));
    return rcpp_result_gen;
END_RCPP
}
// removeBackgroundCPP
Rcpp::NumericMatrix removeBackgroundCPP(Rcpp::NumericMatrix ionsTable, double windowSize, double aboveAverageMultiplier, double minIntensity, Rcpp::NumericVector mzRange);
RcppExport SEXP _clams_removeBackgroundCPP(SEXP ionsTableSEXP, SEXP windowSizeSEXP, SEXP aboveAverageMultiplierSEXP, SEXP minIntensitySEXP, SEXP mzRangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ionsTable(ionsTableSEXP);
    Rcpp::traits::input_parameter< double >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< double >::type aboveAverageMultiplier(aboveAverageMultiplierSEXP);
    Rcpp::traits::input_parameter< double >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzRange(mzRangeSEXP);
    rcpp_result_gen = Rcpp::wrap(removeBackgroundCPP(ionsTable, windowSize, aboveAverageMultiplier, minIntensity, mzRange));
    return rcpp_result_gen;
END_RCPP
}
// groupIonsSameScanCPP
Rcpp::NumericVector groupIonsSameScanCPP(Rcpp::NumericMatrix ionsTable, double mzTolerance);
RcppExport SEXP _clams_groupIonsSameScanCPP(SEXP ionsTableSEXP, SEXP mzToleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ionsTable(ionsTableSEXP);
    Rcpp::traits::input_parameter< double >::type mzTolerance(mzToleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(groupIonsSameScanCPP(ionsTable, mzTolerance));
    return rcpp_result_gen;
END_RCPP
}
// collectFinalPeaksCPP
Rcpp::NumericMatrix collectFinalPeaksCPP(Rcpp::NumericMatrix ionsDataFrame, double mzTolerance, double rtTolerance);
RcppExport SEXP _clams_collectFinalPeaksCPP(SEXP ionsDataFrameSEXP, SEXP mzToleranceSEXP, SEXP rtToleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ionsDataFrame(ionsDataFrameSEXP);
    Rcpp::traits::input_parameter< double >::type mzTolerance(mzToleranceSEXP);
    Rcpp::traits::input_parameter< double >::type rtTolerance(rtToleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(collectFinalPeaksCPP(ionsDataFrame, mzTolerance, rtTolerance));
    return rcpp_result_gen;
END_RCPP
}
// sameMZCPP
bool sameMZCPP(double mzRange10, double mzRange11, double mzRange20, double mzRange21, double mzTolerance);
RcppExport SEXP _clams_sameMZCPP(SEXP mzRange10SEXP, SEXP mzRange11SEXP, SEXP mzRange20SEXP, SEXP mzRange21SEXP, SEXP mzToleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mzRange10(mzRange10SEXP);
    Rcpp::traits::input_parameter< double >::type mzRange11(mzRange11SEXP);
    Rcpp::traits::input_parameter< double >::type mzRange20(mzRange20SEXP);
    Rcpp::traits::input_parameter< double >::type mzRange21(mzRange21SEXP);
    Rcpp::traits::input_parameter< double >::type mzTolerance(mzToleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(sameMZCPP(mzRange10, mzRange11, mzRange20, mzRange21, mzTolerance));
    return rcpp_result_gen;
END_RCPP
}
// groupPeaksAcrossScansCPP
Rcpp::NumericMatrix groupPeaksAcrossScansCPP(Rcpp::NumericMatrix ionsDataFrame, double mzTolerance, double rtTolerance, double meanTimeBetweenScans);
RcppExport SEXP _clams_groupPeaksAcrossScansCPP(SEXP ionsDataFrameSEXP, SEXP mzToleranceSEXP, SEXP rtToleranceSEXP, SEXP meanTimeBetweenScansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ionsDataFrame(ionsDataFrameSEXP);
    Rcpp::traits::input_parameter< double >::type mzTolerance(mzToleranceSEXP);
    Rcpp::traits::input_parameter< double >::type rtTolerance(rtToleranceSEXP);
    Rcpp::traits::input_parameter< double >::type meanTimeBetweenScans(meanTimeBetweenScansSEXP);
    rcpp_result_gen = Rcpp::wrap(groupPeaksAcrossScansCPP(ionsDataFrame, mzTolerance, rtTolerance, meanTimeBetweenScans));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clams_addScansCPP", (DL_FUNC) &_clams_addScansCPP, 2},
    {"_clams_removeBackgroundCPP", (DL_FUNC) &_clams_removeBackgroundCPP, 5},
    {"_clams_groupIonsSameScanCPP", (DL_FUNC) &_clams_groupIonsSameScanCPP, 2},
    {"_clams_collectFinalPeaksCPP", (DL_FUNC) &_clams_collectFinalPeaksCPP, 3},
    {"_clams_sameMZCPP", (DL_FUNC) &_clams_sameMZCPP, 5},
    {"_clams_groupPeaksAcrossScansCPP", (DL_FUNC) &_clams_groupPeaksAcrossScansCPP, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_clams(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
